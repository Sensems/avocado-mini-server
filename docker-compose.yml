version: '3.8'

services:
  # 应用服务
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: avocado-mini-server
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=mysql://avocado:avocado123@mysql:3306/avocado_mini
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secret-jwt-key-here-change-in-production
      - BUILD_WORKSPACE=/tmp/build
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - build_workspace:/tmp/build
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - avocado-network

  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: avocado-mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=root123456
      - MYSQL_DATABASE=avocado_mini
      - MYSQL_USER=avocado
      - MYSQL_PASSWORD=avocado123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      - avocado-network

  # Redis 缓存
  redis:
    image: redis:6.2-alpine
    container_name: avocado-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
    networks:
      - avocado-network

  # Nginx 反向代理 (可选)
  nginx:
    image: nginx:alpine
    container_name: avocado-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - avocado-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  build_workspace:
    driver: local

networks:
  avocado-network:
    driver: bridge