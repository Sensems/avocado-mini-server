// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id          String   @id @default(cuid()) @db.VarChar(30)
  username    String   @unique @db.VarChar(50)
  email       String   @unique @db.VarChar(100)
  password    String   @db.VarChar(255)
  nickname    String?  @db.VarChar(50)
  avatar      String?  @db.VarChar(255)
  phone       String?  @db.VarChar(20)
  status      UserStatus @default(ACTIVE)
  role        UserRole @default(USER)
  permissions Json?
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  miniprograms Miniprogram[]
  buildTasks   BuildTask[]
  notifications Notification[]
  gitCredentials GitCredential[]
  notificationConfigs NotificationConfig[]

  @@map("users")
}

// Git认证凭据表
model GitCredential {
  id          String   @id @default(cuid()) @db.VarChar(30)
  name        String   @db.VarChar(100)
  authType    GitAuthType
  username    String?  @db.VarChar(100)
  password    String?  @db.VarChar(255)
  token       String?  @db.VarChar(500)
  sshKey      String?  @db.Text
  description String?  @db.VarChar(255)
  status      CredentialStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  // 关联关系
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  miniprogramConfigs MiniprogramConfig[]

  @@map("git_credentials")
}

// 通知配置表
model NotificationConfig {
  id          String   @id @default(cuid()) @db.VarChar(30)
  name        String   @db.VarChar(100)
  type        NotificationType
  webhook     String?  @db.VarChar(500)
  security    String?   @db.VarChar(500)
  emails      Json?    // 邮件列表
  events      Json     // 通知事件 [start, success, fail]
  template    Json?    // 通知模板配置
  status      NotificationConfigStatus @default(ACTIVE)
  
  description String?  @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  // 关联关系
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  miniprogramConfigs MiniprogramConfig[]

  @@map("notification_configs")
}

// 小程序基础表
model Miniprogram {
  id            String   @id @default(cuid()) @db.VarChar(30)
  name          String   @db.VarChar(100)
  appId         String   @unique @db.VarChar(50)
  appSecret     String?  @db.VarChar(255)
  privateKeyPath String  @db.VarChar(500) // 改为文件路径
  version       String   @default("1.0.0") @db.VarChar(20)
  description   String?  @db.Text
  status        MiniprogramStatus @default(ACTIVE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String

  // 关联关系
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  buildTasks   BuildTask[]
  webhooks     Webhook[]
  config       MiniprogramConfig?

  @@map("miniprograms")
}

// 小程序配置表
model MiniprogramConfig {
  id            String   @id @default(cuid()) @db.VarChar(30)
  miniprogramId String   @unique
  
  // Git配置
  gitUrl        String   @db.VarChar(500)
  gitBranch     String   @default("master") @db.VarChar(100)
  gitCredentialId String?   // 关联Git认证凭据
  
  // 构建配置
  install       Boolean  @default(true)
  installCommand String  @default("npm install") @db.VarChar(500)
  buildCommand  String?   @default("npm build:mp-weixin") @db.VarChar(500)
  outputPath    String?  @db.VarChar(255)
  projectType   ProjectType @default(NATIVE)
  npm           Boolean  @default(false)
  autoBuild     Boolean  @default(false)
  buildTimeout  Int      @default(30) // 构建超时(分钟)
  
  // 版本管理
  versionType   VersionType @default(MANUAL)
  
  // 上传配置
  es6           Boolean  @default(true)
  es7           Boolean  @default(true)
  minifyJS      Boolean  @default(true)
  minifyWXML    Boolean  @default(true)
  minifyWXSS    Boolean  @default(true)
  minify        Boolean  @default(false)
  codeProtect   Boolean  @default(false)
  autoPrefixWXSS Boolean @default(true)
  
  // 预览配置
  qrcodeFormat  QrcodeFormat @default(IMAGE)
  pagePath      String?  @db.VarChar(255)
  searchQuery   String?  @db.VarChar(500)
  scene         Int?      @default(1011)
  
  // 通知配置
  notificationConfigId String? // 关联通知配置

  // 时间戳
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 关联关系
  miniprogram      Miniprogram @relation(fields: [miniprogramId], references: [id], onDelete: Cascade)
  gitCredential    GitCredential? @relation(fields: [gitCredentialId], references: [id], onDelete: SetNull)
  notificationConfig NotificationConfig? @relation(fields: [notificationConfigId], references: [id], onDelete: SetNull)

  @@map("miniprogram_configs")
}

// 构建任务表
model BuildTask {
  id              String      @id @default(cuid()) @db.VarChar(30)
  appId           String
  type            BuildType
  status          TaskStatus  @default(PENDING)
  priority        Int         @default(2)
  retryCount      Int         @default(0)
  progress        Int         @default(0)
  
  // Git信息
  branch          String      @db.VarChar(100)
  commitId        String?     @db.VarChar(40)
  commitMessage   String?     @db.Text
  commitAuthor    String?     @db.VarChar(100)
  
  // 构建信息
  version         String      @db.VarChar(20)
  description     String?     @db.Text
  buildLog        String?     @db.LongText
  errorMessage    String?     @db.Text
  
  // 时间信息
  createTime      DateTime    @default(now())
  startTime       DateTime?
  endTime         DateTime?
  duration        Int?        // 耗时(秒)
  
  // 操作信息
  operator        String      @db.VarChar(100)
  triggerType     TriggerType @default(MANUAL)
  
  // 结果信息
  qrcodeUrl       String?     @db.VarChar(500)
  packageSize     Json?       // 包大小信息
  
  userId          String

  // 关联关系
  miniprogram     Miniprogram @relation(fields: [appId], references: [id], onDelete: Cascade)
  user            User @relation(fields: [userId], references: [id])
  notifications   Notification[]

  @@map("build_tasks")
}

// 通知表
model Notification {
  id          String   @id @default(cuid()) @db.VarChar(30)
  type        NotificationType
  title       String   @db.VarChar(200)
  content     String   @db.Text
  recipient   String   @db.VarChar(100)
  status      NotificationStatus @default(PENDING)
  retryCount  Int      @default(0)
  config      Json?    // 通知配置(钉钉webhook等)
  result      Json?    // 发送结果
  sentAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  taskId      String?  @db.VarChar(30)
  userId      String

  // 关联关系
  buildTask   BuildTask? @relation(fields: [taskId], references: [id], onDelete: SetNull)
  user        User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

// Webhook表
model Webhook {
  id          String   @id @default(cuid()) @db.VarChar(30)
  url         String   @db.VarChar(500)
  secret      String?  @db.VarChar(255)
  events      Json     // 监听的事件类型
  status      WebhookStatus @default(ACTIVE)
  retryCount  Int      @default(0)
  lastTrigger DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  appId       String

  // 关联关系
  miniprogram Miniprogram @relation(fields: [appId], references: [id], onDelete: Cascade)

  @@map("webhooks")
}

// 系统配置表
model SystemConfig {
  id          String   @id @default(cuid()) @db.VarChar(30)
  key         String   @unique @db.VarChar(100)
  value       Json
  description String?  @db.VarChar(255)
  category    String   @db.VarChar(50)
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_configs")
}

enum GitAuthType {
  SSH
  HTTPS
  TOKEN
}

enum CredentialStatus {
  ACTIVE
  INACTIVE
}

enum NotificationConfigStatus {
  ACTIVE
  INACTIVE
}

enum VersionType {
  AUTO
  MANUAL
}

enum QrcodeFormat {
  IMAGE
  BASE64
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum UserRole {
  ADMIN
  USER
  GUEST
}

enum ProjectType {
  NATIVE    // 原生小程序
  UNI_APP   // uni-app
  TARO      // Taro
  WEPY      // WePY
}

enum MiniprogramStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum BuildType {
  UPLOAD    // 上传
  PREVIEW   // 预览
}

enum TaskStatus {
  PENDING   // 等待中
  RUNNING   // 运行中
  SUCCESS   // 成功
  FAILED    // 失败
  CANCELLED // 已取消
}

enum TriggerType {
  MANUAL    // 手动触发
  WEBHOOK   // Webhook触发
  SCHEDULED // 定时触发
}

enum NotificationType {
  EMAIL
  DINGTALK
  WECHAT
  SMS
}

enum NotificationStatus {
  PENDING   // 等待发送
  SENT      // 已发送
  FAILED    // 发送失败
}

enum WebhookStatus {
  ACTIVE
  INACTIVE
}